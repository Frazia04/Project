import { buildLexer } from 'typescript-parsec';

export const enum Tok {
  Dot,
  Out,
  Fst,
  Snd,
  GetChar,
  PutChar,
  Hole,
  LBrace,
  RBrace,
  EmptySet,
  LAngle,
  RAngle,
  Comma,
  LParen,
  RParen,
  LSBracket,
  RSBracket,
  Plus,
  Minus,
  Star,
  Div,
  Mod,
  Eq,
  NEq,
  Lt,
  Gt,
  Leq,
  Geq,
  //ColonColon,
  Colon,
  Semicolon,
  Arrow,
  If,
  Then,
  Else,
  Let,
  TraceRec,
  Rec,
  In,
  Fun,
  True,
  False,
  RefType,
  RefOp,
  Bang,
  Assignment,
  NumberLiteral,
  Address,
  Match,
  With,
  Pat,
  Wildcard,
  Dataconstructor,
  Identifier,
  Space,
  Raise,
  StringLiteral
}

export const lexer = buildLexer([
  [true, /^\?/g, Tok.Hole],
  [true, /^\{/g, Tok.LBrace],
  [true, /^\}/g, Tok.RBrace],
  [true, /^\u2205/g, Tok.EmptySet],
  [true, /^\u2329/g, Tok.LAngle],
  [true, /^\u232a/g, Tok.RAngle],
  [true, /^,/g, Tok.Comma],
  [true, /^\(/g, Tok.LParen],
  [true, /^\)/g, Tok.RParen],
  [true, /^\[/g, Tok.LSBracket],
  [true, /^\]/g, Tok.RSBracket],
  [true, /^\+/g, Tok.Plus],
  [true, /^(-|\u2238)/g, Tok.Minus],
  [true, /^\*/g, Tok.Star],
  [true, /^\//g, Tok.Div],
  [true, /^%/g, Tok.Mod],
  [true, /^=/g, Tok.Eq],
  [true, /^<>/g, Tok.NEq],
  [true, /^</g, Tok.Lt],
  [true, /^>/g, Tok.Gt],
  [true, /^<=/g, Tok.Leq],
  [true, /^>=/g, Tok.Geq],
  //[true, /^::/g, Tok.ColonColon],
  [true, /^:/g, Tok.Colon],
  [true, /^;/g, Tok.Semicolon],
  [true, /^(->|\u2192|\u21a6)/g, Tok.Arrow],
  [true, /^(\.|\u00b7)/g, Tok.Dot],
  [true, /^out/g, Tok.Out],
  [true, /^fst/g, Tok.Fst],
  [true, /^snd/g, Tok.Snd],
  [true, /^getchar/g, Tok.GetChar],
  [true, /^putchar/g, Tok.PutChar],
  [true, /^raise/g, Tok.Raise],
  [true, /^if/g, Tok.If],
  [true, /^then/g, Tok.Then],
  [true, /^else/g, Tok.Else],
  [true, /^let/g, Tok.Let],
  [true, /^tracerec/g, Tok.TraceRec],
  [true, /^rec/g, Tok.Rec],
  [true, /^in/g, Tok.In],
  [true, /^fun/g, Tok.Fun],
  [true, /^true/g, Tok.True],
  [true, /^false/g, Tok.False],
  [true, /^Ref/g, Tok.RefType],
  [true, /^ref/g, Tok.RefOp],
  [true, /^!/g, Tok.Bang],
  [true, /^:=/g, Tok.Assignment],
  [true, /^\d+N?/g, Tok.NumberLiteral], //TODO zwei Tokens NatLiteral und NumberLiteral
  [true, /^a\d+/g, Tok.Address],
  [true, /^match/g, Tok.Match],
  [true, /^with/g, Tok.With],
  [true, /^\|/g, Tok.Pat],
  [true, /^\_/g, Tok.Wildcard],
  [true, /^\u0022([^']|\\.)*\u0022/g, Tok.StringLiteral],
  [true, /^[A-Z_][A-Za-z0-9_]*/g, Tok.Dataconstructor], // uppcercase identifier
  [true, /^[a-z_][A-Za-z0-9_]*/g, Tok.Identifier], // must come below all keywords and address
  [false, /^\s+/g, Tok.Space],
]);
